% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot_transferability.R
\name{plot_transferability_convergence}
\alias{plot_transferability_convergence}
\title{Plot Transferability Convergence Analysis}
\usage{
plot_transferability_convergence(results, cluster_plot = 0, ncol = NULL)
}
\arguments{
\item{results}{List object returned by \code{assess_transferability()}}

\item{cluster_plot}{Integer. Number of combinations to include per plot. If 0
(default), all combinations are shown in a single plot. Any positive integer is accepted.}

\item{ncol}{Integer or NULL. Number of columns in facet grid within each plot.
If NULL (default), automatically calculated as ceiling(sqrt(cluster_plot)) for optimal layout.
If cluster_plot is 0, automatically calculated as ceiling(sqrt(n_combinations)).}
}
\value{
A ggplot object (if cluster_plot is 0) or a list of ggplot objects
(if cluster_plot > 0)
}
\description{
Creates convergence plots for transferability analysis results, showing running means
and confidence interval widths for each unit combination. This helps assess whether
enough Monte Carlo iterations were used and identify combinations where estimates
haven't stabilized.
}
\details{
For each unit combination, the function plots:
\itemize{
\item Running mean of difference from original TE
\item Running confidence interval width
}

The plots help identify:
\itemize{
\item Whether estimates have converged
\item Which combinations need more iterations
\item Relative stability across different combinations
}

When \code{cluster_plot} is used, combinations are grouped into separate plots
to avoid overcrowding. The layout is automatically optimized to be as square as possible
by calculating ncol as ceiling(sqrt(cluster_plot)).
}
\examples{
\dontrun{
# Run transferability analysis
results <- assess_transferability(data, n_iterations = 200)

# Plot all combinations in one view
plot_transferability_convergence(results)

# Create clustered plots with 9 combinations each (3x3 layout)
convergence_plots <- plot_transferability_convergence(results, cluster_plot = 9)

# Create clustered plots with custom column count
convergence_plots <- plot_transferability_convergence(results, cluster_plot = 8, ncol = 4)
}

}
